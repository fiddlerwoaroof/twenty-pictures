;; This file is part of Twenty Pictures.
;;
;; Twenty Pictures is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Affero General Public License
;; as published by the Free Software Foundation, either version 3 of

;; the License, or (at your option) any later version.
;;
;; Twenty Pictures is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public
;; License along with Twenty Pictures.  If not, see
;; <http://www.gnu.org/licenses/>.

(page "index.html"
  (:require [cljs.core.match]
            [twenty-pictures.frontend.rpc :as rpc])
  (:require-macros [cljs.core.match :refer [match]]
                   [twenty-pictures.let-promise :refer [let-promise]]))

(defn route [parts]
  (match [parts]
         [[id]] {:board id}
         :else {:board "main"}))

(def location-hash
  (-> js/window
      .-location
      .-hash))

(def parts
  (-> location-hash
      (.split "/")
      next
      vec))

(defc place (route parts))
(cell= (pr "the place is " (clj->js place)))

(defc= sections (vec (map-indexed vector rpc/images)))

(defc toggled nil)

(defc= tiled
  (if toggled
    (vec (concat (subvec sections (inc toggled))
                 (subvec sections 0 toggled)))
    sections))

(defc= current
  (get-in rpc/images [toggled]))

(defc show-help false)

(defn get-image-style [section-el]
  (when section-el
    (str "background-image: url(" (section-el :background) ")")))

(defn get-image-url [n]
  (let-promise [[resp (js/fetch (str "https://source.unsplash.com/category/nature/"
                                     (+ 2000 (rand-int 500))
                                     "x"
                                     (+ 2000 (rand-int 500)))
                                )]]
    (let [the-url (.-url resp)]
      (rpc/save-image n the-url))))

(defelem image-pane [{:keys [toggled image click]} children]
  (div :class (cell=
               ((comp vec concat)
                ["card"]
                (when toggled
                  ["toggled"])))
       (apply section
              :class "image-pane"
              :click click
              :style (cell= (get-image-style image))
              children)))

(defelem help-pane [_ _]
  (article :class (cell= {"help" true
                          "visible" show-help})
           (h2 "Key Help")
           (dl (dt "j") (dd "Next picture")
               (dt "k") (dd "Previous picture")
               (dt "r") (dd "Reload picture")
               (dt "?") (dd "Show help")
               (dt "Escape") (dd "Dismiss help and/or go back to overview"))))

(defn clear! [cell]
  (reset! cell nil))

(rpc/get-images)

(html :lang "en"
      (head (title "Twenty Pictures" (str place))
            (link :href "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" :rel "stylesheet")
            (link :href "app.css" :rel "stylesheet")
            (script :src "es6-promise.min.js")
            (script :src "fetch.js"))

      (body :keyup (fn [ev]
                     (case (.-key ev)
                       "j" (swap! toggled #(if %
                                             (mod (inc %)
                                                  20)
                                             0))
                       "k" (swap! toggled #(mod (dec %)
                                                20))
                       "r" (get-image-url @toggled)
                       "?" (swap! show-help not)
                       "Escape" (dosync (if @show-help
                                          (clear! show-help)
                                          (clear! toggled)))
                       nil)
                     (.-preventDefault ev)
                     false)

       (h1 "Twenty Pictures")
       (help-pane)
       (article :class "tiles"
                (when-tpl current
                  (image-pane :toggled true
                              :click #(clear! toggled)
                              :image current
                              (button :class "reload fa fa-refresh"
                                      :click (fn [ev]
                                               (get-image-url @toggled)
                                               (.preventDefault ev)
                                               false))))
                (loop-tpl :bindings [[idx section-el] tiled]
                  (image-pane :toggled (cell= (= idx toggled))
                              :click #(dosync (reset! toggled @idx)
                                              (rpc/get-images)
                                              (-> js/document
                                                  (.querySelector "div.card:first-child")
                                                  (.scrollIntoView)))
                              :image section-el)
                       ))
       (h3 "Made with "
           (a :href "http://unsplash.com"
              "Unsplash")
           (span :class "instructions"
                 "Push ? for help"))))


