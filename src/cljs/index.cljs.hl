;; This file is part of Twenty Pictures.
;;
;; Twenty Pictures is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Affero General Public License
;; as published by the Free Software Foundation, either version 3 of

;; the License, or (at your option) any later version.
;;
;; Twenty Pictures is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public
;; License along with Twenty Pictures.  If not, see
;; <http://www.gnu.org/licenses/>.

(page "index.html"
  (:require [cljs.core.match]
            [twenty-pictures.route :as route]
            [twenty-pictures.help]
            [twenty-pictures.board :as board]
            [twenty-pictures.board-list :as board-list]
            [twenty-pictures.frontend.rpc :as rpc])
  (:require-macros [cljs.core.match :refer [match]]
                   [twenty-pictures.let-promise :refer [let-promise]]))

(defc= sections (vec (map-indexed vector rpc/images)))

(defc toggled nil)

(defc= tiled
  (if toggled
    (vec (concat (subvec sections (inc toggled))
                 (subvec sections 0 toggled)))
    sections))

(defc= current
  (get-in rpc/images [toggled]))

(defc show-help false)

(defn get-image-style [section-el]
  (when section-el
    (str "background-image: url(" (section-el :background) ")")))

(defn get-image-url [n]
  (let-promise [[resp (js/fetch (str "https://source.unsplash.com/category/nature/"
                                     (+ 2000 (rand-int 500))
                                     "x"
                                     (+ 2000 (rand-int 500)))
                                )]]
    (let [the-url (.-url resp)]
      (rpc/save-image n the-url))))

(defelem image-pane [{:keys [toggled image click]} children]
  (div :class (cell=
               ((comp vec concat)
                ["card"]
                (when toggled
                  ["toggled"])))
       (apply section
              :class "image-pane"
              :click click
              :style (cell= (get-image-style image))
              children)))

(defn clear! [cell]
  (reset! cell nil))

(rpc/get-images)

(html :lang "en"
      (head (title "Twenty Pictures" )
            (link :href "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" :rel "stylesheet")
            (link :href "app.css" :rel "stylesheet")
            (script :src "es6-promise.min.js")
            (script :src "fetch.js"))

      (body :keyup (fn [ev]
                     (case (.-key ev)
                       "j" (swap! toggled #(if %
                                             (mod (inc %)
                                                  20)
                                             0))
                       "k" (swap! toggled #(mod (dec %)
                                                20))
                       "r" (get-image-url @toggled)
                       "?" (swap! show-help not)
                       "Escape" (dosync (if @show-help
                                          (clear! show-help)
                                          (clear! toggled)))
                       nil)
                     (.-preventDefault ev)
                     false)

       (h1 "Twenty Pictures")
       (when-tpl show-help
         (twenty-pictures.help/view))
       (case-tpl route/route
         :home (article :class "tiles"
                        (when-tpl current
                          (image-pane :toggled true
                                      :click #(clear! toggled)
                                      :image current
                                      (button :class "reload fa fa-refresh"
                                              :click (fn [ev]
                                                       (get-image-url @toggled)
                                                       (.preventDefault ev)
                                                       false))))
                        (loop-tpl :bindings [[idx section-el] tiled]
                          (image-pane :toggled (cell= (= idx toggled))
                                      :click #(dosync (reset! toggled @idx)
                                                      (rpc/get-images)
                                                      (-> js/document
                                                          (.querySelector "div.card:first-child")
                                                          (.scrollIntoView)))
                                      :image section-el)))
         :board-list (board-list/view)
         :board (board/view :board (rpc/get-board-by-uuid route/board)) 
         (main (article "No such route " (cell= (str route/route)))))
       (h3 "Made with "
           (a :href "http://unsplash.com"
              "Unsplash")
           (span :class "instructions"
                 "Push ? for help"))))
